//
// TideInfo.gs
// Created on 2017-06-23 13:30
// Created by sustny(http://sustny.me/)
// Data provided by Japan Meteorological Agency(http://www.jma.go.jp/jma/)
//
/*
http://www.data.jma.go.jp/kaiyou/db/tide/suisan/readme.html
毎時潮位データ	：	　１～　７２カラム	　３桁×２４時間（０時から２３時）
年月日	：	７３～　７８カラム	　２桁×３
地点記号	：	７９～　８０カラム	　２桁英数字記号
満潮時刻・潮位	：	８１～１０８カラム	　時刻４桁（時分）、潮位３桁（ｃｍ）
干潮時刻・潮位	：	１０９～１３６カラム	　時刻４桁（時分）、潮位３桁（ｃｍ）
※ 満（干）潮が予測されない場合、満（干）潮時刻を「9999」、潮位を「999」としています。
*/
// ------------------------------ データ構造分解図 ------------------------------
//毎時潮位データ: 0-2, 3-5, 6-8, 9-11, 12-14, 15-17, 18-20, ... , 66-18, 69-71;
//年月日: 72-77(年: 72-73 / 月: 74-75 / 日: 76-77);
//地点記号: 78-79;
//満潮(時刻,潮位): 80-83,84-86 / 87-90,91-93 / 94-97,98-100 / 101-104,105-107;
//干潮(時刻,潮位): 108-111,112-114 / 115-118,119-121 / 122-125,126-128 / 129-132,133-135;
// ------------------------------ データ構造分解図 ------------------------------

function DMStoDEGjp(n,e) { //気象庁が公開している位置情報特有の文字列だから変換できる超オレオレ関数
  var north = parseInt(n.substr(0,2)) + parseFloat(n.substr(3,2)/60);
  var east = parseInt(e.substr(0,3)) + parseFloat(e.substr(4,2)/60);
  return [north, east];
}

function searchNearPort(n,e) {
  //http://www.data.jma.go.jp/kaiyou/db/tide/suisan/station.php <- XmlService.parse()で解釈不可能なのでやむをえずPDICT(P:PORT), NDICT(N:NAME)に自力で書き出してる
  //1-80まで格納済み(稚内-石廊崎)
  var PDICT = ['WN', 'KE', 'A0', 'AS', 'A6',
               'NM', 'HN', 'KP', 'KR', 'B1',
               'A9', 'C8', 'TM', 'SO', 'A8',
               'A3', 'HK', 'Q0', 'A5', 'ES',
               'ZP', 'OR', 'SE', 'B6', 'B5',
               'Z8', 'B3', 'IK', 'B2', 'F3',
               'Q1', 'AO', 'ZA', 'Q2', 'B4',
               'SH', 'XS', 'HC', 'HG', 'XT',
               
               'MY', 'Q6', 'OF', 'AY', 'E6',
               'SG', 'SD', 'ZM', 'ON', 'D1',
               'D3', 'D2', 'CS', 'ZF', 'MR',
               'TT', 'KZ', 'QL', 'CB', 'TK',
               'KW', 'YK', 'QS', 'HM', 'QN',
               'Z1', 'OK', 'QO', 'MJ', 'QP',
               'D4', 'QQ', 'CC', 'MC', 'D8',
               'OD', 'Z3', 'D6', 'QK', 'G9'
              ]; //変数PORTに入力可能な記号を一覧化したもの
  
  var NDICT = ['稚内', '枝幸', '紋別', '網走', '羅臼',
               '根室', '花咲', '霧多布', '釧路', '十勝',
               '浦河', '苫小牧東', '苫小牧西', '白老', '室蘭',
               '森', '函館', '吉岡', '松前', '江差',
               '奥尻', '奥尻港', '瀬棚', '寿都', '岩内',
               '忍路', '小樽', '石狩新港', '留萌', '沓形',
               '竜飛', '青森', '浅虫', '大湊', '大間',
               '下北', 'むつ小川原', '八戸', '八戸港', '久慈',
               
               '宮古', '釜石', '大船渡', '鮎川', '石巻',
               '塩釜', '仙台新港', '相馬', '小名浜', '日立',
               '大洗', '鹿島', '銚子漁港', '勝浦', '布良',
               '館山', '木更津', '千葉', '千葉港', '東京',
               '川崎', '京浜港', '横浜', '本牧', '横須賀',
               '油壺', '岡田', '神津島', '三宅島（坪田）', '三宅島（阿古）',
               '八丈島（八重根）', '八丈島（神湊）', '父島', '南鳥島', '湘南港',
               '小田原', '伊東', '下田', '南伊豆', '石廊崎'
              ]; //PDICT内の記号に対応する名前を一覧化したもの
  
  var LDICT = [['45°24', '44°56', '44°21', '44°01', '44°01',
                '43°21', '43°17', '43°05', '42°59', '42°18',
                '42°10', '42°36', '42°38', '42°31', '42°21',
                '42°07', '41°47', '41°27', '41°25', '41°52',
                '42°05', '42°10', '42°27', '42°48', '42°59',
                '43°13', '43°12', '43°13', '43°57', '45°11',
                '41°15', '40°50', '40°54', '41°15', '41°32',
                '41°22', '40°56', '40°32', '40°32', '40°12',
                
                '39°39', '39°16', '39°01', '38°18', '38°24',
                '38°19', '38°16', '37°50', '36°56', '36°30',
                '36°18', '35°56', '35°45', '35°08', '34°55',
                '34°59', '35°22', '35°34', '35°36', '35°39',
                '35°31', '35°28', '35°27', '35°26', '35°17',
                '35°10', '34°47', '34°13', '34°03', '34°04',
                '33°06', '33°08', '27°06', '24°17', '35°18',
                '35°14', '34°54', '34°41', '34°38', '34°37'
               ],
               ['141°41', '142°35', '143°22', '144°17', '145°12',
                '145°35', '145°34', '145°07', '144°22', '143°19',
                '142°46', '141°49', '141°37', '141°19', '140°57',
                '140°36', '140°43', '140°14', '140°06', '140°08',
                '139°29', '139°31', '139°51', '140°14', '140°31',
                '140°52', '141°00', '141°18', '141°38', '141°08',
                '140°23', '140°46', '140°52', '141°09', '140°54',
                '141°14', '141°23', '141°32', '141°33', '141°48',
                
                '141°59', '141°53', '141°45', '141°30', '141°16',
                '141°02', '141°01', '140°58', '140°54', '140°38',
                '140°34', '140°42', '140°52', '140°15', '139°50',
                '139°51', '139°55', '140°03', '140°06', '139°46',
                '139°45', '139°38', '139°39', '139°40', '139°39',
                '139°37', '139°23', '139°08', '139°33', '139°29',
                '139°46', '139°48', '142°12', '153°59', '139°29',
                '139°09', '139°08', '138°58', '138°53', '138°51'
               ]
              ]; //PDICT内の記号に対応する位置情報を一覧化したもの
  
  var Distance = [];
  for(var i=0;i<PDICT.length;i++) {
    var LL = DMStoDEGjp(LDICT[0][i],LDICT[1][i]); //LL[0]:N / LL[1]:E
    //当該地点:n,e / 計算地点:LL[0],LL[1]
    var north = (LL[0]-n)*(LL[0]-n);
    var east = (LL[1]-e)*(LL[1]-e);
    var dist = north+east;
    Distance[i] = Math.sqrt(dist);
  }
  
  var point = Distance[0];
  for(i=1;i<PDICT.length-1;i++) {
    if(point>Distance[i]) {
      var count = i;
      point = Distance[i];
    }
  }
  LL = DMStoDEGjp(LDICT[0][count],LDICT[1][count])
  return [ PDICT[count], NDICT[count], LL[0], LL[1] ];
}

function getText(p, y, m, d) {  
  var URL = UrlFetchApp.fetch('http://www.data.jma.go.jp/kaiyou/data/db/tide/suisan/txt/' + y +'/' + p + '.txt');
  var TXT = URL.getContentText();
  
  //うるう年判定
  if(y % 4 != 0) {
    var arrMonth = [0,31,59,90,120,151,181,212,243,273,304,334]; //各月の開始行
    var data = TXT.substr(( (137*arrMonth[m-1]) + (137*(d-1)) ),136);
  } else {
    var arrMonth = [0,31,60,91,121,152,182,213,244,274,305,335]; //各月の開始行
    var data = TXT.substr(( (137*arrMonth[m-1]) + (137*(d-1)) ),136);
  }
  
  return data;
}

function TextConvert(txt) { //getTextでゲットした生データを加工する関数
  var data = [];
  for(var i=0;i<8;i++) {
    if( parseInt(txt.substr(82+(i*7),2)) < 10 ) {
      data[i*2] = '' + txt.substr(80+(i*7),2) + ':0' + parseInt(txt.substr(82+(i*7),2));
    } else {
      data[i*2] = '' + txt.substr(80+(i*7),2) + ':' + parseInt(txt.substr(82+(i*7),2));
    }
    data[(i*2)+1] = parseInt(txt.substr(84+(i*7),3));
  }
  return data;
}

function TideInfo(NOW, YEAR, MONTH, DAY) {
  /* ----------------------------------- 引数処理 ここから ---------------------------------- */
  for(var i=0;i<NOW.length;i++) {
    if(NOW.substr(i,1) == ',') {
      var NOW0 = NOW.substr(0,i);
      var NOW1 = NOW.slice(i+1,NOW.length);
      break;
    }
  }
  YEAR = parseInt(YEAR);
  MONTH = parseInt(MONTH);
  DAY = parseInt(DAY);
  /* ----------------------------------- 引数処理 ここまで ---------------------------------- */
  
  /* --------------------------- 自動的にあれこれやるエリア ここから --------------------------- */
  var message = "";
  //最も近い場所を求めます
  var PORT = searchNearPort(NOW0, NOW1); //戻り値: 場所記号、場所名、緯度、経度
  message += '\n■□' + PORT[1] +'の潮位情報□■';
  
  /* -------------------- 情報作成エリア ここから -------------------- */
  for(var i=0;i<2;i++) {
    DAY += i;
    if(i != 0) { message += '\n';}
    message += '\n◆' + MONTH + '月' + DAY + '日(' + '日月火水木金土'[new Date(YEAR + '/' + MONTH + '/' + DAY).getDay()] + ')';
  
    //指定した日付でデータを収集します
    var Row = getText(PORT[0], YEAR, MONTH, DAY); //指定日付の潮位データ行まるごと
    //収集したデータを加工します
    var Info = TextConvert(Row); //Info[i] -> 満潮時刻、満潮潮位の順に格納。i=0-7が満潮、i=8-15が干潮、データなしの場合99:99/999を格納

    message += '\n◇潮位'
    if( parseInt(Info[0].substr(0,2)) < parseInt(Info[8].substr(0,2)) ) {
      for(var j=0;j<8;j+=2) {
        if(Info[j+1] != 999) {
          message += '\n【満】' + Info[j] + ' / ' + Info[j+1] + 'cm';
        }
        if(Info[j+9] != 999) {
          message += '\n【干】' + Info[j+8] + ' / ' + Info[j+9] + 'cm'
        }
      }
    } else {
      for(var j=0;j<8;j+=2) {
        if(Info[j+9] != 999) {
          message += '\n【干】' + Info[j+8] + ' / ' + Info[j+9] + 'cm'
        }
        if(Info[j+1] != 999) {
          message += '\n【満】' + Info[j] + ' / ' + Info[j+1] + 'cm';
        }
      }
    }
  }
  /* -------------------- 情報作成エリア ここまで -------------------- */
  
  //GoogleMapのURL生成
  var TideURL = 'https://www.google.com/maps/place/' + PORT[2] + ',' + PORT[3]; //行先から最も近い潮位データの観測地点
  message += '\n\n◇観測地\n' + TideURL;
  /* --------------------------- 自動的にあれこれやるエリア ここまで --------------------------- */
  
  return message;
}
